---
- name: Stop Tomcat service
  become: yes
  service:
    name: tomcat
    state: stopped
  tags: [ 'jenkins' ]

- name: Check exists Jenkins tomcat config
  #stat: path='{{ tomcat_path }}/conf/Catalina/localhost/jenkins.xml'
  stat: path='{{ app_data_path }}/{{ jenkins_war }}'
  register: is_jenkins
  tags: [ 'jenkins' ]

- name: Download Jenkins war file
  become: yes
  become_user: '{{ tomcat_user }}'
  get_url:
    url: '{{ jenkins_url }}'
    dest: '{{ app_data_path }}/{{ jenkins_war }}'
    mode: 0755
  when: not is_jenkins.stat.exists
  tags: [ 'jenkins' ]

- name: Copy Jenkins war file
  copy:
    src: '{{ app_data_path }}/{{ jenkins_war }}'
    dest: '{{ jenkins_war_path }}'
    owner: '{{ tomcat_user }}'
    group: '{{ tomcat_user }}'
    mode: 0755
  when: not is_jenkins.stat.exists
  tags: [ 'jenkins' ]

# * Invalidate because the path of appbase has been changed
#- name: Copy Jenkins context file template
#  template:
#    src: 'jenkins.xml.j2'
#    dest: '{{ tomcat_path }}/conf/Catalina/localhost/jenkins.xml'
#    owner: '{{ tomcat_user }}'
#    group: '{{ tomcat_user }}'
#    mode: 0755
#  when: not is_jenkins.stat.exists
#  tags: [ 'jenkins' ]

- name: Set Jenkins home path
  lineinfile:
    path: '/etc/profile.d/tomcat.sh'
    state: present
    line: 'export JAVA_OPTS=$JAVA_OPTS" -DJENKINS_HOME={{ jenkins_home }}"'
  when: not (lookup('file', '/etc/profile.d/tomcat.sh') is match('.*JENKINS_HOME.*'))
  tags: [ 'jenkins' ]

- name: Start Tomcat service
  become: yes
  service:
    name: tomcat
    state: started
  when: not is_jenkins.stat.exists
  tags: [ 'jenkins' ]

- name: Wait untils Tomcat web is available (delay - 30 sec)
  wait_for:
    host: '{{ inventory_hostname }}'
    port: 8080
    state: started
    delay: 30
    connect_timeout: 10
  tags: [ 'jenkins' ]

- name: Wait untils Jenkins web is available (delay - 30 sec)
  uri: url='http://{{ inventory_hostname }}:8080/jenkins/login'
  register: result
  until: result.status == 200
  retries: 7
  delay: 30
  ignore_errors: true
  when: not is_jenkins.stat.exists
  tags: [ 'jenkins' ]

- name: Check exists JENKINS_HOME
  stat: path='{{ jenkins_home }}'
  register: is_jenkins_home
  tags: [ 'jenkins' ]

- name: Check exists Jenkins backup file
  stat: path='{{ app_data_path }}/jenkins-backup.tar.gz'
  register: is_jenkins_backup
  tags: [ 'jenkins' ]

- name: Copy Jenkins backup file
  copy:
    src: 'jenkins-backup.tar.gz'
    dest: '{{ app_data_path }}/jenkins-backup.tar.gz'
    owner: '{{ tomcat_user }}'
    group: '{{ tomcat_user }}'
    mode: 0644
  when: is_jenkins_home.stat.exists
  tags: [ 'jenkins' ]

- name: Copy Jenkins backup script
  copy:
    src: 'jenkins-backup.sh'
    dest: '{{ app_bin_path }}/jenkins-backup.sh'
    owner: '{{ tomcat_user }}'
    group: '{{ tomcat_user }}'
    mode: 0755
  when: is_jenkins_home.stat.exists
  tags: [ 'jenkins' ]

- name: Copy Jenkins restore script
  copy:
    src: 'jenkins-restore.sh'
    dest: '{{ app_bin_path }}/jenkins-restore.sh'
    owner: '{{ tomcat_user }}'
    group: '{{ tomcat_user }}'
    mode: 0755
  when: is_jenkins_home.stat.exists
  tags: [ 'jenkins' ]

- name: Restore jenkins settings
  become: yes
  become_user: '{{ tomcat_user }}'
  shell: '{{ app_bin_path }}/jenkins-restore.sh {{ jenkins_home }} {{ app_data_path }}/jenkins-backup.tar.gz'
  ignore_errors: true
  when: is_jenkins_home.stat.exists and not is_jenkins_backup.stat.exists
  tags: [ 'jenkins' ]

- name: Restart Tomcat service
  become: yes
  service:
    name: tomcat
    state: restarted
  tags: [ 'jenkins' ]

- name: Wait untils Tomcat web is available (delay - 30 sec)
  wait_for:
    host: '{{ inventory_hostname }}'
    port: 8080
    state: started
    delay: 30
    connect_timeout: 10
  tags: [ 'jenkins' ]

- name: Wait untils Jenkins web is available (delay - 30 sec)
  uri: url='http://{{ inventory_hostname }}:8080/jenkins/login'
  register: result
  until: result.status == 200
  retries: 7
  delay: 30
  tags: [ 'jenkins' ]

- name: Check exists jenkins-cli.jar
  stat: path='{{ app_bin_path }}/jenkins-cli.jar'
  register: is_jenkins_cli
  tags: [ 'jenkins' ]

- name: Download jenkins-cli.jar
  become: yes
  become_user: '{{ tomcat_user }}'
  get_url:
    url: 'http://{{ inventory_hostname }}:8080/jenkins/jnlpJars/jenkins-cli.jar'
    dest: '{{ app_bin_path }}/jenkins-cli.jar'
  when: not is_jenkins_cli.stat.exists
  tags: [ 'jenkins' ]

