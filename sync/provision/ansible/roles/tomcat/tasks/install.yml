---
- name: Check exists Tomcat directory
  stat: path='{{ tomcat_path }}'
  register: is_tomcat
  tags: [ 'tomcat' ]

- name: Create Tomcat user
  user: 
    name: '{{ tomcat_user }}'
    password: "{{ tomcat_user_password | password_hash('sha512') }}"
    groups: '{{ app_group }}'
    append: yes
    shell: /bin/bash
    # * Login should be disabled in the production environment.
    #shell: /sbin/nologin
  tags: [ 'tomcat' ]

- name: Download Tomcat archive file
  get_url:
    url: '{{ tomcat_url }}'
    dest: '/tmp/{{ tomcat_file }}'
    owner: '{{ tomcat_user }}'
    group: '{{ tomcat_user }}'
    mode: 0644
  when: not is_tomcat.stat.exists
  tags: [ 'tomcat' ]

- name: Create Tomcat base directory
  file:
    path: '{{ tomcat_basepath }}'
    state: directory
    owner: '{{ tomcat_user }}'
    group: '{{ tomcat_user }}'
    mode: 0755
  when: not is_tomcat.stat.exists
  tags: [ 'tomcat' ]

- name: Install Tomcat
  become: yes
  become_user: '{{ tomcat_user }}'
  unarchive:
    src: '/tmp/{{ tomcat_file }}'
    dest: '{{ tomcat_basepath }}'
    mode: 0755
  when: not is_tomcat.stat.exists
  tags: [ 'tomcat' ]

- name: Remove Tomcat archive file
  become: yes
  become_user: '{{ tomcat_user }}'
  file:
    path: '/tmp/{{ tomcat_file }}'
    state: absent
  when: not is_tomcat.stat.exists
  tags: [ 'tomcat' ]

- name: Check exists server.xml backup
  stat: path='{{ tomcat_path }}/conf/server.xml.bak'
  register: is_server_xml_backup
  tags: [ 'tomcat' ]

- name: Backup server.xml
  copy:
    src: '{{ tomcat_path }}/conf/server.xml'
    dest: '{{ tomcat_path }}/conf/server.xml.bak'
    owner: root
    group: root
    mode: 0644
  when: not is_server_xml_backup.stat.exists
  tags: [ 'tomcat' ]

- name: Set webapps path
  replace:
    dest: '{{ tomcat_path }}/conf/server.xml'
    regexp: 'appBase="webapps"'
    replace: 'appBase="{{ app_web_path }}"'
  when: not is_server_xml_backup.stat.exists
  tags: [ 'tomcat' ]

- name: Create Tomcat manager link to webapps directory
  file:
    src: '{{ tomcat_path }}/webapps/manager'
    dest: '{{ app_web_path }}/manager'
    owner: '{{ tomcat_user }}'
    group: '{{ tomcat_user }}'
    state: link
  tags: [ 'tomcat' ]

- name: Check exists tomcat-users.xml
  stat: path='{{ tomcat_path }}/conf/tomcat-users.xml'
  register: is_tomcat_users_xml
  tags: [ 'tomcat' ]

- name: Set Tomcat manager user
  become: yes
  become_user: '{{ tomcat_user }}'
  blockinfile:
    path: '{{ tomcat_path }}/conf/tomcat-users.xml'
    block: |
      <role rolename="manager-gui"/>
      <user username="{{ tomcat_manager_user }}" password="{{ tomcat_manager_password }}" roles="manager-gui"/>
    insertbefore: '^</tomcat-users>.*'
    marker: '<!-- {mark} ANSIBLE MANAGED BLOCK [Tomcat] -->'
  when: not (lookup('file', is_tomcat_users_xml.stat.path) is match('^<role rolename="manager-gui"/>'))
  tags: [ 'tomcat' ]

- name: Set Tomcat manager deployment user
  become: yes
  become_user: '{{ tomcat_user }}'
  blockinfile:
    path: '{{ tomcat_path }}/conf/tomcat-users.xml'
    block: |
      <role rolename="manager-script"/>
      <user username="{{ tomcat_deploy_user }}" password="{{ tomcat_deploy_password }}" roles="manager-script"/>
    insertbefore: '^</tomcat-users>.*'
    marker: '<!-- {mark} ANSIBLE MANAGED BLOCK [Tomcat Deploy] -->'
  when: not (lookup('file', is_tomcat_users_xml.stat.path) is match('^<role rolename="manager-script"/>'))
  tags: [ 'tomcat' ]

- name: Check exists tomcat.sh
  stat: path='/etc/profile.d/tomcat.sh'
  register: is_tomcat_sh
  tags: [ 'tomcat' ]

- name: Copy tomcat.sh template
  template:
    src: 'tomcat.sh.j2'
    dest: '/etc/profile.d/tomcat.sh'
    owner: root
    group: root
    mode: 0644
  when: not is_tomcat_sh.stat.exists
  tags: [ 'tomcat' ]

- name: Copy Tomcat auto start-up script
  template:
    src: 'tomcat.j2'
    dest: '/etc/init.d/tomcat'
    owner: root
    group: root
    mode: 0755
  when: not is_tomcat_sh.stat.exists
  tags: [ 'tomcat' ]

- name: Start Tomcat service
  become: yes
  service:
    name: tomcat
    state: started
    enabled: yes
  when: not is_tomcat_sh.stat.exists
  tags: [ 'tomcat' ]

- name: Wait untils Tomcat web is available (delay - 30 sec)
  wait_for:
    host: '{{ inventory_hostname }}'
    port: 8080
    state: started
    delay: 30
    connect_timeout: 10
  when: not is_tomcat_sh.stat.exists
  tags: [ 'tomcat' ]

